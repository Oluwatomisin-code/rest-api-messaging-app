openapi: 3.0.0
info:
  title: Admin API
  version: 1.0.0
  description: API for admin operations

servers:
  - url: http://localhost:8000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Admin:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        isSuperAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        country:
          type: string
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

paths:
  /admin/auth/login:
    post:
      summary: Login admin
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Invalid credentials

  /admin/admins:
    get:
      summary: Get all admins
      tags: [Admins]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of admins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'

    post:
      summary: Create a new admin
      tags: [Admins]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                isSuperAdmin:
                  type: boolean
      responses:
        201:
          description: Admin created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

  /admin/users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully

  /admin/stats:
    get:
      summary: Get system statistics
      tags: [Stats]
      security:
        - bearerAuth: []
      responses:
        200:
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  verifiedUsers:
                    type: integer
                  totalGroups:
                    type: integer
                  totalMessages:
                    type: integer 
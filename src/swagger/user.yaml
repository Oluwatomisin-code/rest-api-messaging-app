openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for user operations

servers:
  - url: http://localhost:8000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        country:
          type: string
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        sender:
          type: string
        recipient:
          type: string
        content:
          type: string
        messageType:
          type: string
          enum: [direct, group]
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Group:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            type: string
        createdBy:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
                - country
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                country:
                  type: string
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Invalid credentials

  /auth/verify-email:
    post:
      summary: Verify user email
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        200:
          description: Email verified successfully
        400:
          description: Invalid token

  /messages:
    get:
      summary: Get user messages
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [direct, group]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /groups:
    get:
      summary: Get user groups
      tags: [Groups]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

    post:
      summary: Create a new group
      tags: [Groups]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /groups/{groupId}/join:
    post:
      summary: Join a group
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully joined group

  /groups/{groupId}/leave:
    post:
      summary: Leave a group
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully left group 